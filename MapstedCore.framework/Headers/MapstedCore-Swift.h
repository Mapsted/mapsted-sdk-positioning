// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CocoaMQTT;
@import CoreBluetooth;
@import CoreData;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#import "/Users/mapsted/Honglin/Mapsted/ios-sdk/ios-sdk-core/positioning/positioning/positioning.h"

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapstedCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("Analytics")
@interface Analytics : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface Analytics (SWIFT_EXTENSION(MapstedCore))
@property (nonatomic) int32_t dataType;
@property (nonatomic, copy) NSString * _Nullable objectFilePath;
@property (nonatomic, copy) NSDate * _Nullable timestamp;
@end


SWIFT_CLASS("_TtC11MapstedCore20AnalyticsSessionInfo")
@interface AnalyticsSessionInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull appName;
@property (nonatomic, copy) NSString * _Nonnull appVersion;
@property (nonatomic, copy) NSString * _Nonnull modelName;
@property (nonatomic, copy) NSString * _Nonnull logInEmail;
@property (nonatomic, copy) NSString * _Nonnull cppVersion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11MapstedCore12CompressData")
@interface CompressData : NSObject
- (NSData * _Nullable)compressWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enumerates the various ways network resource can be reached
typedef SWIFT_ENUM(NSInteger, IsReachable, closed) {
  IsReachableWifi = 1,
  IsReachableCellular = 2,
  IsReachableNotReachable = 3,
  IsReachableUnknown = 4,
};


/// This class manages network analytics data. OLD v2 Code.
SWIFT_CLASS("_TtC11MapstedCore25MNAnalyticsNetworkManager")
@interface MNAnalyticsNetworkManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Use to check if ble is on or off. Used with Assisted Positioning.
SWIFT_CLASS("_TtC11MapstedCore18MNBleDeviceManager")
@interface MNBleDeviceManager : NSObject
/// A handler for when a the time set for rechecking BLE status is due
- (void)recheckTimerFired;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBCentralManager;

@interface MNBleDeviceManager (SWIFT_EXTENSION(MapstedCore)) <CBCentralManagerDelegate>
/// Updates class properties (isEnabled, isSupported) based on BLE device state variables as reported by the system.
/// \param central An instance of the CBCentralManager system object that scans for, discovers, connects to, and manages peripherals.
///
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
@end


/// Encapsulates a building data request from the network
SWIFT_CLASS("_TtC11MapstedCore21MNBuildingDataRequest")
@interface MNBuildingDataRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11MapstedCore21MNBuildingDataStorage")
@interface MNBuildingDataStorage : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class MNLanguage;
@class NSSet;

@interface MNBuildingDataStorage (SWIFT_EXTENSION(MapstedCore))
- (void)addLanguagesObject:(MNLanguage * _Nonnull)value;
- (void)removeLanguagesObject:(MNLanguage * _Nonnull)value;
- (void)addLanguages:(NSSet * _Nonnull)values;
- (void)removeLanguages:(NSSet * _Nonnull)values;
@end

@class MNDataObject;

@interface MNBuildingDataStorage (SWIFT_EXTENSION(MapstedCore))
- (void)addDatasObject:(MNDataObject * _Nonnull)value;
- (void)removeDatasObject:(MNDataObject * _Nonnull)value;
- (void)addDatas:(NSSet * _Nonnull)values;
- (void)removeDatas:(NSSet * _Nonnull)values;
@end


@interface MNBuildingDataStorage (SWIFT_EXTENSION(MapstedCore))
@property (nonatomic) int64_t buildingId;
@property (nonatomic) int32_t totalDownloadSize;
@property (nonatomic) int64_t version;
@property (nonatomic, strong) NSSet * _Nullable datas;
@property (nonatomic, strong) NSSet * _Nullable languages;
@end


SWIFT_CLASS("_TtC11MapstedCore9MNContent")
@interface MNContent : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface MNContent (SWIFT_EXTENSION(MapstedCore))
@property (nonatomic) int64_t contentType;
@property (nonatomic, copy) NSData * _Nullable data;
@property (nonatomic) int64_t dataId;
@property (nonatomic) int64_t dataType;
@property (nonatomic, copy) NSString * _Nullable licenceId;
@property (nonatomic) int64_t version;
@end


/// Encapsulates the management of the database with Core Data
SWIFT_CLASS("_TtC11MapstedCore20MNCoreDataController")
@interface MNCoreDataController : NSObject
+ (MNCoreDataController * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Saves analytics package of type ‘type’ at the specified path ‘filePath’
/// \param filePath The object file path
///
/// \param type A number identifying the type of analytics package
///
- (void)saveAnalyticsPackageWithFilePath:(NSString * _Nonnull)filePath type:(int32_t)type;
///
/// returns:
/// A collection of a analytics packages to be posted.
- (NSArray<NSDictionary<NSString *, id> *> * _Nonnull)fetchAnalyticsPackagesToPost SWIFT_WARN_UNUSED_RESULT;
/// Deletes a package of analytics data at the specified path
/// \param filePath The object file path associated with the anaytics package
///
- (void)deleteAnalyticsPackageWithFilePath:(NSString * _Nonnull)filePath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MNCoreNotificationType : NSInteger;

/// It represents an observable object. An observable object can have
/// one or more observers.
SWIFT_CLASS("_TtC11MapstedCore25MNCoreNotificationManager")
@interface MNCoreNotificationManager : NSObject
/// Singleton pattern to get the core notification itself.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MNCoreNotificationManager * _Nonnull main;)
+ (MNCoreNotificationManager * _Nonnull)main SWIFT_WARN_UNUSED_RESULT;
- (void)postNotification:(enum MNCoreNotificationType)type;
- (void)postNotificationWithUserInfoWithType:(enum MNCoreNotificationType)type obj:(NSDictionary * _Nullable)obj;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Notification types.
typedef SWIFT_ENUM(NSInteger, MNCoreNotificationType, closed) {
/// Positioning setup related notification.
  MNCoreNotificationTypeInitialized = 0,
/// Building related notification.
/// <ul>
///   <li>
///     Building downloaded.
///   </li>
///   <li>
///     Building selected.
///   </li>
/// </ul>
  MNCoreNotificationTypeBuilding = 1,
/// Post notification when detect user is close to a building
  MNCoreNotificationTypeNearBuilding = 2,
/// Search entity related notification
  MNCoreNotificationTypeEntity = 3,
/// Location related notification.
/// <ul>
///   <li>
///     Location change.
///   </li>
/// </ul>
  MNCoreNotificationTypeLocation = 4,
/// Routing related notification
/// <ul>
///   <li>
///     Routing
///   </li>
/// </ul>
  MNCoreNotificationTypeRouting = 5,
/// Sign detection notification
  MNCoreNotificationTypeSign = 6,
/// Any activity related notification, mainly for progress bar
  MNCoreNotificationTypeActivity = 7,
/// Any assisted positioning UI change notification
  MNCoreNotificationTypeBanner = 8,
  MNCoreNotificationTypeAskForEntity = 9,
  MNCoreNotificationTypeFloorDetection = 10,
/// Bluetooth device related notification, when user switch to enable
  MNCoreNotificationTypeBluetooth = 11,
/// Any licence status change will fire this notification
  MNCoreNotificationTypeLicence = 12,
/// Post a notification when a property finish fetching its images
  MNCoreNotificationTypeImageFetched = 13,
/// Post a notification when a property data or building data download progress changes. When this type of notification posted, a userInfo must come with it.
/// <ul>
///   <li>
///     UserInfo: dataId: <code>int</code> building or property id
///   </li>
///   <li>
///     UserInfo: requestType: <code>int</code> MNRequestType raw value.
///   </li>
///   <li>
///     UserInfo: progress: <code>int</code> progress
///   </li>
/// </ul>
  MNCoreNotificationTypeDataDownloadProgress = 14,
  MNCoreNotificationTypeBuildingDataDeserialized = 15,
  MNCoreNotificationTypePropertyDataDeserialized = 16,
/// Post a notification when get a marketing event
  MNCoreNotificationTypeMarketing = 17,
/// Post a notification when get a shareLocation event
  MNCoreNotificationTypeShareLocation = 18,
};


SWIFT_CLASS("_TtC11MapstedCore12MNDataObject")
@interface MNDataObject : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface MNDataObject (SWIFT_EXTENSION(MapstedCore))
@property (nonatomic, copy) NSData * _Nullable data;
@property (nonatomic, copy) NSString * _Nullable dataId;
@property (nonatomic) BOOL downloaded;
@property (nonatomic) int32_t downloadSize;
@property (nonatomic) int64_t type;
@property (nonatomic) int64_t version;
@end


SWIFT_CLASS("_TtC11MapstedCore16MNFileDownloader")
@interface MNFileDownloader : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11MapstedCore10MNLanguage")
@interface MNLanguage : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface MNLanguage (SWIFT_EXTENSION(MapstedCore))
@property (nonatomic, copy) NSData * _Nullable data;
@property (nonatomic, copy) NSString * _Nullable dataId;
@property (nonatomic) BOOL downloaded;
@property (nonatomic) int32_t downloadSize;
@property (nonatomic) int16_t languageCode;
@property (nonatomic) int64_t version;
@end


SWIFT_CLASS("_TtC11MapstedCore16MNMapDataRequest")
@interface MNMapDataRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encapsulates the details of a retry attempt at making requests over the network
SWIFT_CLASS("_TtC11MapstedCore24MNNetworkDataRetryDetail")
@interface MNNetworkDataRetryDetail : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Faciliates synchronous and asynchronous network operations.
SWIFT_CLASS("_TtC11MapstedCore16MNNetworkManager")
@interface MNNetworkManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MapstedCore15MNNetworkStatus")
@interface MNNetworkStatus : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum Level : NSInteger;

/// Encapsulates information regarding information logged for debugging purposes.
SWIFT_CLASS("_TtC11MapstedCore7MNPrint")
@interface MNPrint : NSObject
/// Print function used in Objective-C. Please only use this print inside objective-c. For swift print, use p:l:t.
/// Print will only log message under debug mode and will abort the process for critial errors.
/// \param l Log level.
///
/// \param f File and function for the print.
///
/// \param t Text message or error message.
///
+ (void)objcPWithL:(enum Level)l f:(NSString * _Nonnull)f t:(NSString * _Nonnull)t;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, Level, closed) {
  LevelV = 0,
  LevelD = 1,
  LevelE = 2,
  LevelWtf = 3,
};


/// Encapsulates a property data request from the network
SWIFT_CLASS("_TtC11MapstedCore21MNPropertyDataRequest")
@interface MNPropertyDataRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11MapstedCore21MNPropertyDataStorage")
@interface MNPropertyDataStorage : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface MNPropertyDataStorage (SWIFT_EXTENSION(MapstedCore))
- (void)addDatasObject:(MNDataObject * _Nonnull)value;
- (void)removeDatasObject:(MNDataObject * _Nonnull)value;
- (void)addDatas:(NSSet * _Nonnull)values;
- (void)removeDatas:(NSSet * _Nonnull)values;
@end


@interface MNPropertyDataStorage (SWIFT_EXTENSION(MapstedCore))
- (void)addLanguagesObject:(MNLanguage * _Nonnull)value;
- (void)removeLanguagesObject:(MNLanguage * _Nonnull)value;
- (void)addLanguages:(NSSet * _Nonnull)values;
- (void)removeLanguages:(NSSet * _Nonnull)values;
@end


@interface MNPropertyDataStorage (SWIFT_EXTENSION(MapstedCore))
@property (nonatomic) int64_t propertyId;
@property (nonatomic) int32_t totalDownloadSize;
@property (nonatomic) int64_t version;
@property (nonatomic, strong) NSSet * _Nullable datas;
@property (nonatomic, strong) NSSet * _Nullable languages;
@end


/// Encapsulates a property info request from the network
SWIFT_CLASS("_TtC11MapstedCore21MNPropertyInfoRequest")
@interface MNPropertyInfoRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encapsulates innformation regarding environmental settings
SWIFT_CLASS("_TtC11MapstedCore14MNSettingUtils")
@interface MNSettingUtils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MNSettingUtils * _Nonnull shared;)
+ (MNSettingUtils * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL debugTestModuleEnable;
@property (nonatomic, readonly) BOOL debugReadFileAsIOS;
@property (nonatomic, readonly) BOOL debugTestFileIOSEncoding;
@property (nonatomic, readonly) BOOL debugDrawTrajectory;
@property (nonatomic, readonly) BOOL debugDrawMaxStateHistory;
@end


SWIFT_CLASS("_TtC11MapstedCore19MNShareLocationItem")
@interface MNShareLocationItem : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MapstedCore22MNShareLocationManager")
@interface MNShareLocationManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CocoaMQTT;
@class CocoaMQTTMessage;

@interface MNShareLocationManager (SWIFT_EXTENSION(MapstedCore)) <CocoaMQTTDelegate>
- (void)mqttDidPing:(CocoaMQTT * _Nonnull)mqtt;
- (void)mqttDidReceivePong:(CocoaMQTT * _Nonnull)mqtt;
- (void)mqttDidDisconnect:(CocoaMQTT * _Nonnull)mqtt withError:(NSError * _Nullable)err;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didConnectAck:(enum CocoaMQTTConnAck)ack;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didPublishMessage:(CocoaMQTTMessage * _Nonnull)message id:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didPublishAck:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didReceiveMessage:(CocoaMQTTMessage * _Nonnull)message id:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didSubscribeTopic:(NSArray<NSString *> * _Nonnull)topics;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didUnsubscribeTopic:(NSString * _Nonnull)topic;
@end


/// This class contains all public api for core positioning.
SWIFT_CLASS("_TtC11MapstedCore14MapstedCoreApi")
@interface MapstedCoreApi : NSObject
/// Initializer method
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MNParsedContentResponse;
@class MNObjectDataMap;
@class MNEvent;
@class MNPosition;
@class MNRouteResponse;
@class MNRouteNode;

SWIFT_CLASS("_TtC11MapstedCore18MapstedCoreSyncApi")
@interface MapstedCoreSyncApi : NSObject
/// Returns the singleton shared instance of the class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MapstedCoreSyncApi * _Nonnull shared;)
+ (MapstedCoreSyncApi * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)onBearingChangedWithDegree:(CGFloat)degree;
- (BOOL)downloadPropertyAndCategorySync SWIFT_WARN_UNUSED_RESULT;
- (BOOL)downloadPropertyInfoSync SWIFT_WARN_UNUSED_RESULT;
- (void)downloadPropertyInfoAsyncWithCompletion:(void (^ _Nullable)(BOOL))completion;
- (void)downloadPropertyDataWithPropertyId:(NSInteger)propertyId language:(MNLanguageType)language progress:(void (^ _Nonnull)(float))progress completed:(void (^ _Nonnull)(void))completed;
- (void)downloadMarketingContentAsyncWithContentType:(MNContentType)contentType dataType:(MNDataType)dataType mapDataId:(NSInteger)mapDataId completion:(void (^ _Nullable)(BOOL, MNParsedContentResponse * _Nullable))completion;
- (void)removeImagesWithUrlMap:(NSDictionary<NSString *, NSString *> * _Nonnull)urlMap;
- (void)fetchImagesFromServerAsyncWithUrlMap:(NSDictionary<NSNumber *, NSString *> * _Nonnull)urlMap dataId:(NSInteger)dataId dataType:(MNDataType)dataType;
- (void)fetchPropertyInfoImagesFromServerAsyncWithUrlMap:(NSDictionary<NSString *, NSString *> * _Nonnull)urlMap dataId:(NSInteger)dataId dataType:(MNDataType)dataType;
- (NSInteger)propertyVersionWithPropertyId:(NSInteger)propertyId SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)languageVersionForPropertyDataWithPropertyId:(NSInteger)propertyId languageType:(MNLanguageType)languageType SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)buildingVersionWithBuildingId:(NSInteger)buildingId SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)languageVersionForBuildingDataWithBuildingId:(NSInteger)buildingId languageType:(MNLanguageType)languageType SWIFT_WARN_UNUSED_RESULT;
- (MNObjectDataMap * _Nullable)objectDataMapForPropertyInfos SWIFT_WARN_UNUSED_RESULT;
- (MNObjectDataMap * _Nullable)objectDataMapForPropertyInfoWithPropertyId:(NSInteger)propertyId SWIFT_WARN_UNUSED_RESULT;
- (MNObjectDataMap * _Nullable)objectDataMapForPropertyDataWithPropertyId:(NSInteger)propertyId SWIFT_WARN_UNUSED_RESULT;
- (MNObjectDataMap * _Nullable)objectDataMapForBuildingDataWithBuildingId:(NSInteger)buildingId SWIFT_WARN_UNUSED_RESULT;
- (MNObjectDataMap * _Nullable)objectDataMapForPropertyLanguageWithPropertyId:(NSInteger)propertyId languageId:(NSInteger)languageId SWIFT_WARN_UNUSED_RESULT;
- (MNObjectDataMap * _Nullable)objectDatamapForBuildingLanguageWithBuildingId:(NSInteger)buildingId languageId:(NSInteger)languageId SWIFT_WARN_UNUSED_RESULT;
- (MNObjectDataMap * _Nullable)objectDatamapForMarketingContentWithContentType:(MNContentType)contentType dataType:(MNDataType)dataType dataId:(NSInteger)dataId licenceId:(NSString * _Nonnull)licenceId SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)versionForMarketingContentWithContentType:(MNContentType)contentType dataType:(MNDataType)dataType dataId:(NSInteger)dataId licenceId:(NSString * _Nonnull)licenceId SWIFT_WARN_UNUSED_RESULT;
- (MNObjectDataMap * _Nullable)objectDataMapForGlobalCategories SWIFT_WARN_UNUSED_RESULT;
- (void)removePropertyDataWithPropertyId:(NSInteger)propertyId;
- (void)removeBuildingDataWithBuildingId:(NSInteger)buildingId;
- (void)unloadPropertyDataWithPropertyId:(NSInteger)propertyId;
- (void)unloadBuildingDataWithBuildingId:(NSInteger)buildingId;
- (void)onMarketingWithEvent:(MNEvent * _Nonnull)event;
- (void)onPositionChangeWithEncrypted:(MNPosition * _Nonnull)encrypted;
- (void)onPositionChangeWithAnimationWithEncrypted:(MNPosition * _Nonnull)encrypted begin:(BOOL)begin;
- (void)onShareLocationWithPosition:(MNPosition * _Nonnull)position;
- (void)addNearbyPropertiesWithPropertyIds:(NSSet<NSNumber *> * _Nonnull)propertyIds;
- (void)removeNearbyPropertiesWithPropertyIds:(NSSet<NSNumber *> * _Nonnull)propertyIds;
- (void)onRouteResponseWithResponse:(MNRouteResponse * _Nonnull)response;
- (void)onRouteInstructionWithNextKeyPoint:(MNRouteNode * _Nonnull)nextKeyPoint;
- (void)onRoutingStatusWithIsRoutingModeOn:(BOOL)isRoutingModeOn latestRouteResponse:(MNRouteResponse * _Nonnull)latestRouteResponse;
- (void)onRouteRecalculationWithNewRouteResponse:(MNRouteResponse * _Nonnull)newRouteResponse;
- (void)onDestinationReachedWithDestinationEntityId:(NSInteger)destinationEntityId;
- (NSString * _Nonnull)licenceKey SWIFT_WARN_UNUSED_RESULT;
- (BOOL)validateLicenceOnline SWIFT_WARN_UNUSED_RESULT;
@end


/// Encapsulates ways of reaching a nework resource
SWIFT_CLASS("_TtC11MapstedCore12Reachability")
@interface Reachability : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Reachability * _Nonnull shared;)
+ (Reachability * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (enum IsReachable)checkReachable SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
